/*
  UDPSendReceive.pde:
 This sketch receives UDP message strings, prints them to the serial port
 and sends an "acknowledge" string back to the sender
 
 A Processing sketch is included at the end of file that can be used to send 
 and received messages for testing with a computer.
 
 created 21 Aug 2010
 by Michael Margolis
 
 This code is in the public domain.
 */
#include <SPI.h>         // needed for Arduino versions later than 0018
#include <Ethernet.h>
#include <EthernetUdp.h>         // UDP library from: bjoern@cs.stanford.edu 12/30/2008

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {  
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 177);
IPAddress broadcast(255, 255, 255, 255);

unsigned int localPort = 41234;      // local port to listen on

// buffers for receiving and sending data
char packetBuffer[UDP_TX_PACKET_MAX_SIZE]; //buffer to hold incoming packet,
char  ReplyBuffer[] = "discover:general";       // a string to send back
bool discovered = false;

// An EthernetUDP instance to let us send and receive packets over UDP
EthernetUDP Udp;

const uint8_t *address;


void callback(char* topic, byte* payload, unsigned int length) {
  // handle message arrived
  Serial.println("Connected to MQTT server");
}
EthernetClient ethClient;

void setup() {
  // start the Ethernet and UDP:
  Ethernet.begin(mac,ip);
  Udp.begin(localPort);

  Serial.begin(9600);
}

void loop() {
  if( ! discovered) {
    // if there's data available, read a packet
    int packetSize = Udp.parsePacket();
    if(packetSize)
    {
      Serial.print("Received packet of size ");
      Serial.println(packetSize);
      Serial.print("From ");
      IPAddress remote = Udp.remoteIP();
      for (int i =0; i < 4; i++)
      {
        Serial.print(remote[i], DEC);
        if (i < 3)
        {
          Serial.print(".");
        }
      }
      Serial.print(", port ");
      Serial.println(Udp.remotePort());
  
      // read the packet into packetBufffer
      Udp.read(packetBuffer,UDP_TX_PACKET_MAX_SIZE);
      Serial.println("Contents:");
      Serial.println(packetBuffer);
      
      // @todo ip needs to be in different format
      Serial.println(Udp.remoteIP());
      
      byte ip[] = {};
      IPAddress remoter = Udp.remoteIP();
      ip[0] = remoter[0];
      ip[1] = remoter[1];
      ip[2] = remoter[2];
      ip[3] = remoter[3];
      
      delay(200);
    
      discovered = true;
    } else {
       Serial.println("Write UDP");
      Udp.beginPacket(broadcast, localPort);
      Udp.write(ReplyBuffer);
      Udp.endPacket(); 
    }
  }
  
   
    
  delay(1000);
  
  
  
}
